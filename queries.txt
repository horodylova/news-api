SELECT articles.author, articles.title, articles.article_id, articles.created_at, articles.votes, articles.article_img_url FROM articles;

CREATE INDEX idx_comments_body
ON comments (body);



SELECT COUNT(*) AS comment_count
FROM comments
WHERE articles.article_id = comments.article_id;

SELECT articles.author, articles.title, articles.article_id, articles.created_at, articles.votes, articles.article_img_url, 
COUNT(body.comment_id) 
AS comment_count
FROM articles
LEFT JOIN comments 
ON articles.article_id = comments.article_id;


SELECT 
            articles.author, 
            articles.title, 
            articles.article_id, 
            articles.created_at, 
            articles.votes, 
            articles.article_img_url,
            articles.topic,

            COUNT(comments.comment_id) AS comment_count
            
        FROM articles
        LEFT JOIN comments ON articles.article_id = comments.article_id
        GROUP BY articles.author, articles.title, articles.article_id, articles.created_at, articles.votes, articles.article_img_url, articles.topic
        ORDER BY ${sort_by} DESC;

comment_count

{
    body: "Replacing the quiet elegance of the dark suit and tie with the casual indifference of these muted earth tones is a form of fashion suicide, but, uh, call me crazy — onyou it works.",
    votes: 100,
    author: "icellusedkars",
    article_id: 1,
    created_at: 1583025180000,
  },
  {
    body: " I carry a log — yes. Is it funny to you? It is not to me.",
    votes: -100,
    author: "icellusedkars",
    article_id: 1,
    created_at: 1582459260000,
  },

 SELECT 
articles.author, 
articles.title, 
articles.article_id, 
articles.created_at, 
articles.votes, 
articles.article_img_url,
articles.topic,
COUNT(comments.comment_id) AS comment_count
FROM articles 
WHERE articles.article_id = comments.article_id
LEFT JOIN comments ON articles.article_id = comments.article_id
    
    
    ;


`SELECT 
comments.comment_id,
comments.votes,
comments.created_at,
comments.author,
comments.body,
articles.article_id,
FROM comments
LEFT JOIN articles 
ON comments.article_id = articles.article_id
ORDER BY created_at DESC;
`

//  Responds with:
// an array of comments for the given article_id of which each comment should have the following properties:
// comment_id
// votes
// created_at
// author
// body
// article_id
// Comments should be served with the most recent comments first.

`INSERT 
  INTO comments 
  (body, author, article_id, created_at, votes) 
  VALUES('hello', 'Svitlana', 1, NOW(), 0) 
  RETURNING *;`



Request body accepts:

an object in the form { inc_votes: newVote }.
newVote will indicate how much the votes property in the database should be updated by, e.g.
{ inc_votes : 1 } would increment the current article's vote property by 1
{ inc_votes : -100 } would decrement the current article's vote property by 100


(`SELECT 
    articles.author, 
    articles.title, 
    articles.article_id, 
    articles.created_at, 
    articles.votes, 
    articles.article_img_url,
    articles.topic,

    COUNT(comments.body) 

    AS comment_count
    FROM articles

    LEFT JOIN comments 
    ON articles.article_id = comments.article_id

    GROUP BY 

    articles.author, 
    articles.title, 
    articles.article_id, 
    articles.created_at, 
    articles.votes, 
    articles.article_img_url, 
    articles.topic

   FILTER(WHERE topics.slug = $1)`, [slug])